node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth1
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth0
	 ip address 10.0.0.1/24
	!
    }
    canvas c1
    iconcoords {422.0 148.0}
    labelcoords {422.0 180.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	!
	interface eth1
	!
	ip route 10.0.2.0/24 10.0.0.2
	}
    }
    custom-config {
	custom-config-id service:IPForward
	custom-command IPForward
	config {
	files=('ipforward.sh', )
	}
    }
    custom-config {
	custom-config-id service:IPForward:ipforward.sh
	custom-command ipforward.sh
	config {
	#!/bin/sh
	# auto-generated by IPForward service (utility.py)
	/sbin/sysctl -w net.ipv4.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv6.conf.all.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.all.send_redirects=1
	/sbin/sysctl -w net.ipv4.conf.all.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.default.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth0.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth0.send_redirects=1
	/sbin/sysctl -w net.ipv4.conf.eth0.rp_filter=0
	/sbin/sysctl -w net.ipv4.conf.eth1.forwarding=1
	/sbin/sysctl -w net.ipv4.conf.eth1.send_redirects=1
	/sbin/sysctl -w net.ipv4.conf.eth1.rp_filter=0
	
	}
    }
    services {zebra vtysh IPForward}
    interface-peer {eth1 n7}
}

node n2 {
    type lanswitch
    network-config {
	hostname SWITCH
	!
    }
    canvas c1
    iconcoords {138.0 149.0}
    labelcoords {138.0 173.0}
    interface-peer {e0 n1}
    interface-peer {e1 n3}
    interface-peer {e2 n4}
}

node n3 {
    type router
    model PC
    network-config {
	hostname atacante
	!
	interface eth0
	 ip address 10.0.0.20/24
	!
    }
    canvas c1
    iconcoords {300.0 249.0}
    labelcoords {300.0 281.0}
    interface-peer {eth0 n2}
    services {DefaultRoute}
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.1
	}
    }
}

node n4 {
    type router
    model PC
    network-config {
	hostname usuario1
	!
	interface eth0
	 ip address 10.0.0.21/24
	!
    }
    canvas c1
    iconcoords {116.0 258.0}
    labelcoords {116.0 290.0}
    interface-peer {eth0 n2}
    services {DefaultRoute UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('start.sh', )
	cmdup=('sh start.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:start.sh
	custom-command start.sh
	config {
	bash /root/Flask/script.sh
	}
    }
    custom-config {
	custom-config-id service:servicios
	custom-command servicios
	config {
	files=('startServices.sh', )
	}
    }
    custom-config {
	custom-config-id service:servicios:startServices.sh
	custom-command startServices.sh
	config {
	bash /root/Flask/script.sh &
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.1
	}
    }
}

node n6 {
    type router
    model host
    network-config {
	hostname Servidor
	!
	interface eth0
	 ip address 10.0.1.10/24
	 ipv6 address 2001:1::10/64
	!
    }
    canvas c1
    iconcoords {656.0 222.0}
    labelcoords {656.0 254.0}
    services {DefaultRoute SSH UserDefined}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	files=('start.sh', )
	cmdup=('sh start.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:start.sh
	custom-command start.sh
	config {
	python3 /root/Flask/bank.py &
	}
    }
    custom-config {
	custom-config-id service:servicios
	custom-command servicios
	config {
	files=('startServices.sh', )
	}
    }
    custom-config {
	custom-config-id service:servicios:startServices.sh
	custom-command startServices.sh
	config {
	python3 /root/Flask/bank.py &
	
	}
    }
    interface-peer {eth0 n7}
}

node n7 {
    type lanswitch
    network-config {
	hostname n7
	!
    }
    canvas c1
    iconcoords {536.0 200.0}
    labelcoords {536.0 224.0}
    interface-peer {e0 n1}
    interface-peer {e1 n6}
    interface-peer {e2 n8}
}

node n8 {
    type rj45
    network-config {
	hostname dummy0
	!
    }
    canvas c1
    iconcoords {655.0 122.0}
    labelcoords {655.0 154.0}
    interface-peer {0 n7}
}

link l1 {
    nodes {n1 n2}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

link l3 {
    nodes {n2 n4}
    bandwidth 0
}

link l5 {
    nodes {n1 n7}
    bandwidth 0
}

link l6 {
    nodes {n7 n6}
    bandwidth 0
}

link l7 {
    nodes {n7 n8}
}

annotation a2 {
    iconcoords {70 100 415 279}
    type rectangle
    label {Red Interna}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #ebc06c
    width 0
    border black
    rad 25
    canvas c1
}

annotation a1 {
    iconcoords {432.0 109.0 700.0 278.0}
    type rectangle
    label {Internet}
    labelcolor black
    fontfamily {Arial}
    fontsize {12}
    color #C0C0FF
    width 0
    border black
    rad 25
    canvas c1
}

canvas c1 {
    name {Canvas1}
}

hook 4:runtime_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

# Puente entre VM e Internet
BRenp0s3=`brctl show | grep -w dummy0 | cut -f1`
#if [ -z $BRenp0s3 ]; then
#	BRenp0s3=`brctl show | grep -w veth8.2* | cut -f1`
#fi

# Completo la tabla de ruteo de la VM para que alcance las rutas de la topologia.
ifconfig "$BRenp0s3" 10.0.1.50/24 up






}

hook 6:shutdown_hook.sh {
#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

core-cleanup







}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid no
    traffic_start 0
}

option session {
}

